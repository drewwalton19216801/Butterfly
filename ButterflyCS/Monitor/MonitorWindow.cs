
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
using ButterflyCS.Monitor.Command;
using ButterflyCS.Monitor.Wizards;
using Sharp6502;
using Terminal.Gui;

namespace ButterflyCS.Monitor
{
    /// <summary>
    /// The monitor Toplevel window.
    /// </summary>
    /// <seealso cref="Terminal.Gui.Toplevel" />
    public partial class MonitorWindow {

        /// <summary>
        /// Initializes a new instance of the <see cref="MonitorWindow"/> class.
        /// </summary>
        public MonitorWindow() {
            InitializeComponent();

            txtOutput.CanFocus = false;
            txtA.CanFocus = false;
            txtX.CanFocus = false;
            txtY.CanFocus = false;
            txtPC.CanFocus = false;
            txtSP.CanFocus = false;
            txtStatus.CanFocus = false;

            txtCommand.KeyUp += (keyEvent) =>
            {
                if (keyEvent.KeyEvent.Key == Terminal.Gui.Key.Enter && txtCommand.HasFocus)
                {
                    // Check for empty input
                    if (txtCommand.Text.Length != 0)
                    {
                        // Get the input
                        string input = (string)txtCommand.Text;

                        // Run the command
                        string output = Interpreter.InterpretCommand(input);

                        // Add the output to the output text view
                        MonitorOutput.Add(output);
                        txtOutput.Text += MonitorOutput.GetMostRecentOutput() + "\n";

                        // Scroll to the bottom of the output text view
                        txtOutput.MoveEnd();

                        // Reset the prompt
                        txtCommand.Text = "";
                        txtCommand.CursorPosition = 0;
                    }
                }
            };

            btnRun.Clicked += () =>
            {
                btnRun_Clicked();
            };

            btnPause.Clicked += () =>
            {
                btnPause_Clicked();
            };

            btnStep.Clicked += () =>
            {
                btnStep_Clicked();
            };

            btnReset.Clicked += () =>
            {
                btnReset_Clicked();
            };

            btnLoad.Clicked += () =>
            {
                btnLoad_Clicked();
            };

            btnQuit.Clicked += () =>
            {
                btnQuit_Clicked();
            };
        }

        private void btnRun_Clicked()
        {
            Machine.Run();
            UpdateMonitorOutput("Machine running.");
        }

        private void btnPause_Clicked()
        {
            Machine.Pause();
            UpdateMonitorOutput("Machine paused.");
            UpdateRegisters();
        }

        private void btnStep_Clicked()
        {
            if (!Machine.isSingleStepping)
            {
                Machine.isSingleStepping = true;
            }
            Machine.Step();
            UpdateMonitorOutput("Machine stepped.");
            UpdateRegisters();
        }

        private void btnReset_Clicked()
        {
            Machine.Reset();
            UpdateMonitorOutput("Machine reset.");
            UpdateRegisters();
        }

        private void btnLoad_Clicked()
        {
            Application.Run(new OpenFile());
            UpdateMonitorOutput();
        }

        private void btnQuit_Clicked()
        {
            if (MessageBox.Query(50, 7, "Quit", "Are you sure you want to quit?", "Yes", "No") == 0)
            {
                // Quit everything and die
                Environment.Exit(0);
            }
        }

        private void UpdateRegisters()
        {
            txtA.Text = Registers.A.ToString("X2");
            txtX.Text = Registers.X.ToString("X2");
            txtY.Text = Registers.Y.ToString("X2");
            txtSP.Text = Registers.SP.ToString("X2");
            txtPC.Text = Registers.PC.ToString("X4");
            txtCycles.Text = CPU.cycles.ToString();

            // Display the status flags as a series of 0s and 1s
            txtStatus.Text = Convert.ToString(Registers.P, 2).PadLeft(8, '0');
        }

        private void UpdateMonitorOutput(string output)
        {
            MonitorOutput.Add(output);
            UpdateMonitorOutput();
        }

        private void UpdateMonitorOutput()
        {
            txtOutput.Text += MonitorOutput.GetMostRecentOutput() + "\n";
            txtOutput.MoveEnd();
        }
    }
}
