
//------------------------------------------------------------------------------

//  <auto-generated>
//      This code was generated by:
//        TerminalGuiDesigner v1.0.24.0
//      You can make changes to this file and they will not be overwritten when saving.
//  </auto-generated>
// -----------------------------------------------------------------------------
namespace ButterflyCS.Monitor {
    using ButterflyCS.Monitor.Command;
    using ButterflyCS.Monitor.Wizards;
    using Sharp6502;
    using Terminal.Gui;

    public partial class MonitorWindow {
        private string previousCommand = string.Empty; // The previous command

        /// <summary>
        /// Initializes a new instance of the <see cref="Monitor"/> class.
        /// </summary>
        public MonitorWindow() {
            InitializeComponent();

            txtOutput.CanFocus = false;
            txtRegA.CanFocus = false;
            txtRegX.CanFocus = false;
            txtRegY.CanFocus = false;
            txtRegPC.CanFocus = false;
            txtRegSP.CanFocus = false;
            txtRegStatus.CanFocus = false;
            txtCommand.EnsureFocus();

            txtCommand.KeyPress += (keyEvent) =>
            {
                if (keyEvent.KeyEvent.Key == Terminal.Gui.Key.Enter && txtCommand.HasFocus)
                {
                    // Check for empty input
                    if (txtCommand.Text.Length != 0)
                    {
                        // Get the input
                        string input = (string)txtCommand.Text;

                        // Run the command
                        bool needsReset = Interpreter.InterpretCommand(input);

                        // Update the monitor output if needed
                        if (needsReset)
                        {
                            UpdateMonitorOutput();
                            UpdateRegisters();
                        }

                        // Set the previous command
                        previousCommand = input;

                        // Reset the prompt
                        txtCommand.Text = "";
                        txtCommand.CursorPosition = 0;
                    }
                }

                // Check for up arrow
                if (keyEvent.KeyEvent.Key == Terminal.Gui.Key.CursorUp)
                {
                    // If the previous command is not empty,
                    // set the input box text to the previous command
                    if (previousCommand.Length != 0)
                    {
                        txtCommand.Text = previousCommand;
                        txtCommand.CursorPosition = previousCommand.Length;
                    }
                }
            };

            openbinMenuItem.Action += () =>
            {
                Application.Run(new OpenFile());
                UpdateMonitorOutput();
            };

            quitMenuItem.Action += () =>
            {
                menuQuit_Clicked();
            };

            runMenuItem.Action += () =>
            {
                menuRun_Clicked();
            };

            pauseMenuItem.Action += () =>
            {
                menuPause_Clicked();
            };

            resetMenuItem.Action += () =>
            {
                menuReset_Clicked();
            };

            stepMenuItem.Action += () =>
            {
                menuStep_Clicked();
            };

            aboutButterflyMenuItem.Action += () =>
            {
                menuAbout_Clicked();
            };
        }

        private void menuRun_Clicked()
        {
            Machine.Run();
            UpdateMonitorOutput("Machine running.");
        }

        private void menuPause_Clicked()
        {
            Machine.Pause();
            UpdateMonitorOutput("Machine paused.");
            UpdateRegisters();
        }

        private void menuStep_Clicked()
        {
            if (!Machine.isSingleStepping)
            {
                Machine.isSingleStepping = true;
            }
            Machine.Step();
            UpdateMonitorOutput("Machine stepped.");
            UpdateRegisters();
        }

        private void menuReset_Clicked()
        {
            Machine.Reset();
            UpdateMonitorOutput("Machine reset.");
            UpdateRegisters();
        }

        private void menuLoad_Clicked()
        {
            Application.Run(new OpenFile());
            UpdateMonitorOutput();
        }

        private void menuQuit_Clicked()
        {
            if (MessageBox.Query(50, 7, "Quit", "Are you sure you want to quit?", "Yes", "No") == 0)
            {
                // Quit everything and die
                Environment.Exit(0);
            }
        }

        private void menuAbout_Clicked()
        {
            // Display a simple About message box
            MessageBox.Query(50, 7, "About", "ButterflyCS\n\nA 6502 emulator written in C#.\n\nCreated by: Drew Walton\n\nVersion: 0.1.0", "OK");
        }

        private void UpdateRegisters()
        {
            txtRegA.Text = Registers.A.ToString("X2");
            txtRegX.Text = Registers.X.ToString("X2");
            txtRegY.Text = Registers.Y.ToString("X2");
            txtRegSP.Text = Registers.SP.ToString("X2");
            txtRegPC.Text = Registers.PC.ToString("X4");

            // Display the status flags as a series of 0s and 1s
            txtRegStatus.Text = Convert.ToString(Registers.P, 2).PadLeft(8, '0');
        }

        private void UpdateMonitorOutput(string output)
        {
            MonitorOutput.Add(output);
            UpdateMonitorOutput();
        }

        private void UpdateMonitorOutput()
        {
            txtOutput.Text += MonitorOutput.GetMostRecentOutput() + "\n";
            txtOutput.MoveEnd();
        }
    }
}
